const vectorsToCheck = [[-1, -1], [-1, 0], [-1, 1],
    [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];

/**
 * Generate arrays with content generated by gen function.
 */
function makeArray(len, gen) {
    return Array.from(new Array(len), gen);
}

/**
 * Generate arrays with random content.
 */
function randomPixels(width, height) {
    return makeArray(height, () => (
        makeArray(width, () => Math.round(Math.random()))
    ));
}

function makeValidatorForRange(a, b) {
    return (n) => (a <= n && n <= b);
}

/**
 * Basic logic function saying if pixel should be turned on or off.
 */
function turnOnOrOff(i, j, oldPixels, height, width) {
    let aliveNeighbours = 0;

    const validXCoordinate = makeValidatorForRange(0, width - 1);
    const validYCoordinate = makeValidatorForRange(0, height - 1);

    const validCoordinates = ([x, y]) => (
        validXCoordinate(x) && validYCoordinate(y)
    );

    // vector way

    aliveNeighbours = vectorsToCheck
        // translate to point [j, i]
        .map(([x, y]) => ([x + j, y + i]))
        // filter out points out of bounds
        .filter(validCoordinates)
        // sum alive neighbours
        .reduce(
            (value, [x, y]) => (value + oldPixels[y][x]),
            0,
        );

    if (aliveNeighbours === 3) {
        return 1;
    }
    if (aliveNeighbours === 2 && oldPixels[i][j] === 1) {
        return 1;
    }

    return 0;
}

/**
 * Function to apply turnOnOrOff on every pixel, to transform old pixels
 * into newer version, in one time step.
 */
function evolve(pixels) {
    const oldPixels = pixels;

    const height = oldPixels.length;
    const width = oldPixels[0].length;

    const newPixels = oldPixels.map(
        (row, i) => row.map(
            (pixel, j) => turnOnOrOff(i, j, oldPixels, height, width),
        ),
    );

    return newPixels;
}

const state = {
    pixels: randomPixels(100, 100),
};

const getters = {
    pixel: (s) => (i, j) => s.pixels[i][j],
};

const mutations = {
    stepForward(s) {
        /* eslint-disable-next-line no-param-reassign */
        s.pixels = evolve(s.pixels);
    },
};

const actions = {
    stepForward({ commit }) {
        commit('stepForward');
    },
};

export default {
    namespaced: true,

    state,
    getters,
    mutations,
    actions,
};
