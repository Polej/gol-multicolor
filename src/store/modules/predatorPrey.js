import makeValidatorForRange from '../../helpers';

const vectorsToCheck = [[-1, -1], [-1, 0], [-1, 1],
    [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];

/**
 * Generate arrays with content generated by gen function.
 */
function makeArray(len, gen) {
    return Array.from(new Array(len), gen);
}

// function indexOfMax(a) {
//     return a.reduce((iMax, x, i, arr) => (x > arr[iMax] ? i : iMax), 0);
// }

// When this const is set to 4, half of the container is empty,
// and half is colored, giving colors free space to evolve.
// It should be integer.
const CHANCE_TO_GET_EMPTY_CELL = 2; // out of (CHANCE_TO_GET_EMPTY_CELL + 4) = 1/2
// const TEMPERATURE = 300;

/**
 *  This function produces random integer number in interval [0, 4].
 *  If the number is less than
 *  CHANCE_TO_GET_EMPTY_CELL, it yields 0. Therefore there is
 *  greater probability to see 0. It is done to create more free space for
 *  colors to evolve.
 *  For remaining colors it yields 1,2,3,4 with standard probabilities
 *  (number between x and x+1 is transformed to
     * (x - (CHANCE_TO_GET_EMPTY_CELL - 1)).
 *
 * so [0, CHANCE_TO_GET_EMPTY_CELL] -> 0
 * and e.g.
 * 4.1 -> 1
 * 5.5 -> 2
 * 6.3 -> 3
 * 7.5 -> 4
 */
function nonUniformFlooredRandom() {
    // 4 is the number of colours
    const d8 = Math.floor(Math.random() * (CHANCE_TO_GET_EMPTY_CELL + 2)); // {0..8}
    return Math.floor(Math.max(0,
        d8 - (CHANCE_TO_GET_EMPTY_CELL - 1))); // half chance to get 0, 1/8 chance to get {1..4}
    // when CHANCE_TO_GET_EMPTY_CELL = 4
}

// function emptyPixelsQuadLife(width, height) {
//     return makeArray(height, () => (
//         makeArray(width, () => 0)
//     ));
// }

/**
 * Generate arrays with random content.
 */
function randomPixelsQuadLife(width, height) {
    return makeArray(height, () => (
        makeArray(width, () => nonUniformFlooredRandom())
    ));
}

// function randomPixelFromProbabilityArray(arr) {
//     const total = arr.reduce((a, b) => a + b, 0);
//     const probabilities = arr.map((pI) => pI / total);
//
//     let cumulatedProb = 0;
//
//     let whichOne = null;
//
//     const random = Math.random();
//
//     probabilities.forEach((prob, i) => {
//         if (cumulatedProb <= random && random < cumulatedProb + prob) {
//             whichOne = i;
//         }
//         cumulatedProb += prob;
//     });
//
//     return whichOne;
// }

/**
 * QuadLifeRule produces number symbolizing empty cell (0) or one of 4 ON colors. (1-4)
 */
function predatorPreyRule(neighboursByType, oldPixels, i, j) {
    const centralPoint = oldPixels[i][j];
    /* eslint-disable-next-line no-unused-vars */
    const [numberOfEmptyCells, ...rest] = neighboursByType;
    const totalNumberOfAlive = rest.reduce((a, b) => a + b, 0);

    // This is resulting index from `rest` Array, to have position on
    // `neighboursByType` Array, it is needed to add +1 to the index.
    // const maxColorIdx = indexOfMax(rest);
    // const maxColorQuantity = rest[maxColorIdx];

    // firstly, there are 2 cases with empty central cell

    // central cell empty,
    // give birth to a color for which there is majority (>=2 out of 3)
    if (centralPoint === 0 && (totalNumberOfAlive === 3)
        && neighboursByType[1] > 0 && neighboursByType[1] !== 3) {
        return 1; // + 1 because we search idx on input Array.
        // explained before
    }
    if (centralPoint === 0 && (totalNumberOfAlive === 2)
        && neighboursByType[1] === 0) {
        return 2;
    }

    /* const predOrPrey = randomPixelFromProbabilityArray([0,
        TEMPERATURE / (1 + TEMPERATURE),
        1 / (1 + TEMPERATURE)]);
    if (centralPoint === 2 && (neighboursByType[1] >= neighboursByType[2] + 2)
        && predOrPrey === 1) {
        return predOrPrey;
    } */

    // stay alive when 2 or 3
    if (centralPoint === 2 && totalNumberOfAlive > 0 && neighboursByType[1] < 2) {
        return centralPoint;
    }
    if (centralPoint === 1 && neighboursByType[2] > 0) {
        return centralPoint;
    }

    // 2 = green, 1 = red

    return 0;
}

/**
 * Basic logic function saying if pixel should be turned on or off.
 */
function turnOnOrOffProbabilisticQuadLife(i, j, oldPixels, height, width) {
    let neighboursByType = [0, 0, 0]; // empty cells at first place [0],
    // the rest [1], [2], [3], [4] are numbers of cells for 4 different colors

    const validXCoordinate = makeValidatorForRange(0, width - 1);
    const validYCoordinate = makeValidatorForRange(0, height - 1);

    const validCoordinates = ([x, y]) => (
        validXCoordinate(x) && validYCoordinate(y)
    );

    // firstly, scan the vicinity, and filter points if out of bounds,
    // then calculate how many cells are in the vicinity for a given color

    neighboursByType = neighboursByType.map((colorSum, colorIdx) => vectorsToCheck
        // translate to point [j, i]
        .map(([x, y]) => ([x + j, y + i]))
        // filter out points out of bounds
        .filter(validCoordinates)
        // sum alive neighbours
        .reduce(
            (value, [x, y]) => {
                if (oldPixels[y][x] === colorIdx) {
                    return (value + 1);
                }
                return value;
            },
            colorSum,
        ));

    // Should the central cell be alive?
    return predatorPreyRule(neighboursByType, oldPixels, i, j);
}

/**
 * Function to apply turnOnOrOff on every pixel, to transform old pixels
 * into newer version, in one time step.
 */
function evolve(pixels) {
    const oldPixels = pixels;

    const height = oldPixels.length;
    const width = oldPixels[0].length;

    const newPixels = oldPixels.map(
        (row, i) => row.map(
            (pixel, j) => turnOnOrOffProbabilisticQuadLife(i, j, oldPixels, height, width),
        ),
    );

    return newPixels;
}

const state = {
    pixels: randomPixelsQuadLife(100, 100),
    interval: null,
    lastI: null,
    lastJ: null,
};

const getters = {
    pixel: (s) => (i, j) => s.pixels[i][j],
};

const mutations = {
    stepForward(s) {
        s.pixels = evolve(s.pixels);
    },

    setInterval(s, interval) {
        s.interval = interval;
    },

    addCell(s, { i, j }) {
        if (i !== s.lastI || j !== s.lastJ) {
            if (s.pixels[i]) {
                s.pixels[i].splice(j, 1, Math.floor(Math.random() * 3));
            }

            s.lastI = i;
            s.lastJ = j;
        }
    },
};

const actions = {
    stepForward({ commit }) {
        commit('stepForward');
    },

    start({ commit, state: s, dispatch }) {
        if (!s.interval) {
            commit('setInterval', setInterval(() => dispatch('stepForward', 100)));
        }
    },

    stop({ commit, state: s }) {
        if (s.interval) {
            clearInterval(s.interval);
            commit('setInterval', null);
        }
    },

    toggleStart({ state: s, dispatch }) {
        if (s.interval) {
            dispatch('stop');
        } else {
            dispatch('start');
        }
    },
};

export default {
    namespaced: true,

    state,
    getters,
    mutations,
    actions,
};
