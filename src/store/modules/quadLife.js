const vectorsToCheck = [[-1, -1], [-1, 0], [-1, 1],
    [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];

/**
 * Generate arrays with content generated by gen function.
 */
function makeArray(len, gen) {
    return Array.from(new Array(len), gen);
}

function indexOfMax(arr) {
    if (arr.length === 0) {
        return -1;
    }

    let max = arr[0];
    let maxIndex = 0;

    for (let i = 1; i < arr.length; i += 1) {
        if (arr[i] > max) {
            maxIndex = i;
            max = arr[i];
        }
    }

    return maxIndex;
}

const ZERO_MULTIPLYING_FACTOR = 4;

function nonUniformRandom(random) {
    if (random <= ZERO_MULTIPLYING_FACTOR) {
        return 0;
    }
    return random - (ZERO_MULTIPLYING_FACTOR - 1);
}

/**
 * Generate arrays with random content.
 */
function randomPixelsQuadLife(width, height) {
    return makeArray(height, () => (
        makeArray(width, () => Math.floor(
            nonUniformRandom(Math.random() * (ZERO_MULTIPLYING_FACTOR + 4)),
        ))
    ));
}

function makeValidatorForRange(a, b) {
    return (n) => (a <= n && n <= b);
}

/**
 * QuadLifeRule produces number symbolizing empty cell or one of 4 ON colors.
 */
function quadLifeRule(aliveNeighboursByColor, oldPixels, i, j) {
    const centralPoint = oldPixels[i][j];
    /* eslint-disable-next-line no-unused-vars */
    const [first, ...rest] = aliveNeighboursByColor;
    const totalNumberOfAlive = rest.reduce((a, b) => a + b, 0);

    const maxColorIdx = indexOfMax(rest);
    const maxColorQuantity = rest[maxColorIdx];

    // give birth to a color for which there is majority (>=2 out of 3)
    if (centralPoint === 0 && (totalNumberOfAlive === 3)
        && maxColorQuantity >= 2) {
        return maxColorIdx + 1;
    }
    if (centralPoint === 0 && totalNumberOfAlive === 3
        // are there 3 groups with num === 1 each?
        && rest.filter((number) => number === 1).length === 3) {
        // give birth to the fourth non-present here color
        return rest.findIndex((number) => number === 0) + 1;
    }
    // if there is central point, make it stay alive when 2 or 3 neighbours
    if (centralPoint !== 0 && (totalNumberOfAlive === 2 || totalNumberOfAlive === 3)) {
        return centralPoint;
    }
    return 0;
}

/**
 * Basic logic function saying if pixel should be turned on or off.
 */
function turnOnOrOffQuadLife(i, j, oldPixels, height, width) {
    let aliveNeighboursByColor = [0, 0, 0, 0, 0];

    const validXCoordinate = makeValidatorForRange(0, width - 1);
    const validYCoordinate = makeValidatorForRange(0, height - 1);

    const validCoordinates = ([x, y]) => (
        validXCoordinate(x) && validYCoordinate(y)
    );

    // vector way

    aliveNeighboursByColor = aliveNeighboursByColor.map((colorSum, colorIdx) => vectorsToCheck
        // translate to point [j, i]
        .map(([x, y]) => ([x + j, y + i]))
        // filter out points out of bounds
        .filter(validCoordinates)
        // sum alive neighbours
        .reduce(
            (value, [x, y]) => {
                if (oldPixels[y][x] === colorIdx) {
                    return (value + 1);
                }
                return value;
            },
            colorSum,
        ));

    // Should the central cell be alive?
    return quadLifeRule(aliveNeighboursByColor, oldPixels, i, j);
}

/**
 * Function to apply turnOnOrOff on every pixel, to transform old pixels
 * into newer version, in one time step.
 */
function evolve(pixels) {
    const oldPixels = pixels;

    const height = oldPixels.length;
    const width = oldPixels[0].length;

    const newPixels = oldPixels.map(
        (row, i) => row.map(
            (pixel, j) => turnOnOrOffQuadLife(i, j, oldPixels, height, width),
        ),
    );

    return newPixels;
}

const state = {
    pixels: randomPixelsQuadLife(100, 100),
};

const getters = {
    pixel: (s) => (i, j, col) => s.pixels[i][j][col],
    pixelStyleQuadLife: (s) => (i, j) => {
        const number = s.pixels[i][j];
        if (number === 1) return 'background-color: rgb(255, 0, 0)';
        if (number === 2) return 'background-color: rgb(0, 255, 0)';
        if (number === 3) return 'background-color: rgb(0, 0, 255)';
        if (number === 4) return 'background-color: rgb(255, 255, 0)';
        return 'background-color: rgb(255, 255, 255)';
    },
};

const mutations = {
    stepForward(s) {
        /* eslint-disable-next-line no-param-reassign */
        s.pixels = evolve(s.pixels);
    },
};

const actions = {
    stepForward({ commit }) {
        commit('stepForward');
    },
};

export default {
    namespaced: true,

    state,
    getters,
    mutations,
    actions,
};
